package main

import (
	// "fmt"
	"math/rand"
	"time"
)

// Package math/rand provides support for generating pseudo-random numbers.

// Here is how to generate a random integer between 0 and 99:

// n := rand.Intn(100) // n is a random int, 0 <= n < 100
// Function rand.Float64 returns a random floating point number between 0.0 and 1.0:

// f := rand.Float64() // f is a random float64, 0.0 <= f < 1.0
// There is also support for shuffling a slice (or other data structures):

// x := []string{"a", "b", "c", "d", "e"}
// // shuffling the slice put its elements into a random order
// rand.Shuffle(len(x), func(i, j int) {
// 	x[i], x[j] = x[j], x[i]
// })
// Seeds
// The number sequences generated by package math/rand are not truly random.
// They are completely determined by an initial seed value. By default, the package uses the integer 1 as a seed.

// In order to get a different sequence of random numbers, we need to specify a different seed value. A simple approach is to use the "current time":

// rand.Seed(time.Now().UnixNano())
// Setting the seed must be done before calling any of the functions that generate random numbers. We usually only need to set the seed once in our program. From one seed we can generate many random numbers.

// Warning
// If you don't call rand.Seed, then the package will produce the same sequence of random numbers each time your program runs!

// Instructions
// Elaine is working on a new children's game that features animals and magic wands. It is time to code functions for rolling a die, generating random wand energy and shuffling a slice.

// Task 1
// Seed the random number generator.

// Implement a SeedWithTime function that seeds the math.rand package with the current computer time.

// Stuck? Reveal Hints
// Opens in a modal
// Task 2
// Roll a die.

// Implement a RollADie function.

// This will be the traditional twenty-sided die with numbers 1 to 20.

// d := RollADie() // d will be assigned a random int, 1 <= d <= 20

// Stuck? Reveal Hints
// Opens in a modal
// Task 3
// Generate wand energy.

// Implement a GenerateWandEnergy function. The wand energy should be a random floating point number between 0.0 and 12.0.

// f := GenerateWandEnergy()  // f will be assigned a random float64, 0.0 <= f < 12.0

// Stuck? Reveal Hints
// Opens in a modal
// Task 4
// Shuffle a slice.

// The game features eight different animals:

// ant
// beaver
// cat
// dog
// elephant
// fox
// giraffe
// hedgehog
// Write a function ShuffleAnimals that returns a slice with the eight animals in random order.

func SeedWithTime() {
	rand.Seed(time.Now().UnixNano())
}

func RollADie() int {
	return rand.Intn(20) + 1
}

func GenerateWandEnergy() float64 {
	return rand.Float64() * 12.0
}

func ShuffleAnimals() []string {
	animals := []string{"ant", "beaver", "cat", "dog", "elephant", "fox", "giraffe", "hedgehog"}
	// rand.Seed(time.Now().UnixNano())
	rand.Shuffle(len(animals), func(i, j int) {
		animals[i], animals[j] = animals[j], animals[i]
	})
	
	return animals
}

func main() {
	SeedWithTime()
	println(RollADie())
	println(GenerateWandEnergy())
	println(ShuffleAnimals())
}
